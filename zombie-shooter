import pygame
import sys
import math
import random

# Initialize pygame
pygame.init()

# Game constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
FPS = 60

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
ZOMBIE_COLOR = (0, 128, 0)  # Dark green for zombies

# Set up the display
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Zombie Shooter")
clock = pygame.time.Clock()


# Player class
class Player:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.radius = 15
        self.color = BLUE
        self.speed = 5
        self.health = 100

    def draw(self, screen):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius)

        # Draw health bar
        pygame.draw.rect(screen, RED, (self.x - 20, self.y - 30, 40, 5))
        pygame.draw.rect(screen, GREEN, (self.x - 20, self.y - 30, 40 * (self.health / 100), 5))

    def move(self, keys):
        if keys[pygame.K_LEFT] and self.x - self.radius > 0:
            self.x -= self.speed
        if keys[pygame.K_RIGHT] and self.x + self.radius < SCREEN_WIDTH:
            self.x += self.speed
        if keys[pygame.K_UP] and self.y - self.radius > 0:
            self.y -= self.speed
        if keys[pygame.K_DOWN] and self.y + self.radius < SCREEN_HEIGHT:
            self.y += self.speed

    def take_damage(self, amount):
        self.health -= amount
        if self.health < 0:
            self.health = 0

    def is_alive(self):
        return self.health > 0


# Bullet class
class Bullet:
    def __init__(self, x, y, direction_x, direction_y):
        self.x = x
        self.y = y
        self.radius = 5
        self.color = RED
        self.speed = 10
        # Normalize direction vector
        length = math.sqrt(direction_x ** 2 + direction_y ** 2)
        if length != 0:
            self.direction_x = direction_x / length
            self.direction_y = direction_y / length
        else:
            self.direction_x = 0
            self.direction_y = -1

    def update(self):
        self.x += self.direction_x * self.speed
        self.y += self.direction_y * self.speed

    def draw(self, screen):
        pygame.draw.circle(screen, self.color, (int(self.x), int(self.y)), self.radius)

    def is_off_screen(self):
        return (self.x < 0 or self.x > SCREEN_WIDTH or
                self.y < 0 or self.y > SCREEN_HEIGHT)


# Zombie class
class Zombie:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.radius = 15
        self.color = ZOMBIE_COLOR
        self.speed = 2
        self.health = 30

    def draw(self, screen):
        pygame.draw.circle(screen, self.color, (int(self.x), int(self.y)), self.radius)

        # Draw health bar
        pygame.draw.rect(screen, RED, (self.x - 15, self.y - 25, 30, 3))
        pygame.draw.rect(screen, GREEN, (self.x - 15, self.y - 25, 30 * (self.health / 30), 3))

    def move_towards_player(self, player_x, player_y):
        dx = player_x - self.x
        dy = player_y - self.y
        distance = math.sqrt(dx ** 2 + dy ** 2)
        if distance != 0:
            dx /= distance
            dy /= distance
            self.x += dx * self.speed
            self.y += dy * self.speed

    def take_damage(self, amount):
        self.health -= amount

    def is_alive(self):
        return self.health > 0


# Function to check collision between two circles
def check_collision(x1, y1, r1, x2, y2, r2):
    distance = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
    return distance < r1 + r2


# Game state variables
player = Player(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)
bullets = []
zombies = []
score = 0
game_over = False
zombie_spawn_timer = 0
game_font = pygame.font.SysFont(None, 36)

# New shooting logic variables
is_shooting = False
shoot_cooldown = 0

# Main game loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False
            if event.key == pygame.K_SPACE and player.is_alive():
                is_shooting = True
            if event.key == pygame.K_r and not player.is_alive():
                player = Player(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)
                bullets = []
                zombies = []
                score = 0
                game_over = False
                is_shooting = False
                shoot_cooldown = 0

        elif event.type == pygame.KEYUP:
            if event.key == pygame.K_SPACE:
                is_shooting = False

    if not game_over:
        keys = pygame.key.get_pressed()
        player.move(keys)

        # Auto shooting logic
        if is_shooting and shoot_cooldown <= 0:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            direction_x = mouse_x - player.x
            direction_y = mouse_y - player.y
            bullets.append(Bullet(player.x, player.y, direction_x, direction_y))
            shoot_cooldown = 10  # Lower value = faster shooting

        if shoot_cooldown > 0:
            shoot_cooldown -= 1

        for bullet in bullets[:]:
            bullet.update()
            if bullet.is_off_screen():
                bullets.remove(bullet)

        for zombie in zombies[:]:
            zombie.move_towards_player(player.x, player.y)

            if check_collision(zombie.x, zombie.y, zombie.radius, player.x, player.y, player.radius):
                player.take_damage(0.5)

            for bullet in bullets[:]:
                if check_collision(zombie.x, zombie.y, zombie.radius, bullet.x, bullet.y, bullet.radius):
                    zombie.take_damage(10)
                    if bullet in bullets:
                        bullets.remove(bullet)
                    if not zombie.is_alive():
                        zombies.remove(zombie)
                        score += 10
                        break

        zombie_spawn_timer += 1
        if zombie_spawn_timer >= 60:
            zombie_spawn_timer = 0
            side = random.randint(0, 3)
            if side == 0:
                x = random.randint(0, SCREEN_WIDTH)
                y = -20
            elif side == 1:
                x = SCREEN_WIDTH + 20
                y = random.randint(0, SCREEN_HEIGHT)
            elif side == 2:
                x = random.randint(0, SCREEN_WIDTH)
                y = SCREEN_HEIGHT + 20
            else:
                x = -20
                y = random.randint(0, SCREEN_HEIGHT)
            zombies.append(Zombie(x, y))

        if not player.is_alive():
            game_over = True

    # Draw everything
    screen.fill(BLACK)

    for bullet in bullets:
        bullet.draw(screen)

    for zombie in zombies:
        zombie.draw(screen)

    if player.is_alive():
        player.draw(screen)

    score_text = game_font.render(f"Score: {score}", True, WHITE)
    screen.blit(score_text, (10, 10))

    health_text = game_font.render(f"Health: {int(player.health)}", True, WHITE)
    screen.blit(health_text, (10, 50))

    if game_over:
        game_over_text = game_font.render("GAME OVER - Press 'R' to restart", True, RED)
        screen.blit(game_over_text, (SCREEN_WIDTH // 2 - 180, SCREEN_HEIGHT // 2 - 18))

    pygame.display.flip()
    clock.tick(FPS)

pygame.quit()
sys.exit()
